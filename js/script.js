        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
        var map = L.map('map', {
            center: [51.5, 57], 
            zoom: 5,          
            minZoom: 5,       
            maxZoom: 10,      
            zoomSnap: 0.001,    
            zoomDelta: 0.001,   
            zoomControl: false 
            });

        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∫–∞—Ä—Ç—ã
        var southWest = L.latLng(40, 27);  
        var northEast = L.latLng(60, 85); 
        var bounds = L.latLngBounds(southWest, northEast);
        
        map.setMaxBounds(bounds);
        
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑—É–º–∞
        map.options.minZoom = 5;  
        map.options.maxZoom = 10; 
        
        map.on('drag', function () {
            map.panInsideBounds(bounds, { animate: false });
        });
        
        map.on('zoom', function () {
            if (map.getZoom() < map.options.minZoom) {
                map.setZoom(map.options.minZoom);
            }
        });


        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ OpenStreetMap
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attributionControl: false
        }).addTo(map);
    
        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Leaflet.easyPrint
        var printer = L.easyPrint({
            title: '–†–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å –∫–∞—Ä—Ç—É',
            position: 'topleft', 
            sizeModes: ['A4Portrait', 'A4Landscape'],
            exportOnly: false, 
            hideControlContainer: false,
            customLayout: true,
            scale: 1
        }).addTo(map);
        

    map.invalidateSize(); // –ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–∞—Ä—Ç—ã

        // –ú–∞—Å—Å–∏–≤—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        const labels = [];
        const distanceLabels = [];
        const markers = [];

//---------------–ì—Ä–∞–Ω–∏—Ü—ã--------------------------

// –û–±—â–∏–π —Å—Ç–∏–ª—å –¥–ª—è –≤—Å–µ—Ö GeoJSON
    const geoJsonStyle = {
        color: 'red',  
        weight: 3,  
        opacity: 0.5,       
        fillOpacity: 0     
    };

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π GeoJSON
    fetch('json/kz_0.json')
        .then(response => response.json())
        .then(data => {
        L.geoJSON(data, { style: geoJsonStyle }).addTo(map);
    });



//----------------------------------–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö-------------------------------

// –°–æ–∑–¥–∞–µ–º —Å–ª–æ–π –¥–ª—è —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ (–ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è)
const reservoirLayerGroup = L.layerGroup().addTo(map);
const outgoingFlowLayerGroup = L.layerGroup().addTo(map);


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä—É–±–æ–ø—Ä–æ–≤–æ–¥–∞—Ö
async function fetchPipelinesFromDB() {
    try {
        const response = await fetch('database/getData.php?table=Pipelines');
        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status}`);
        }
        const pipelines = await response.json();
        console.log('–î–∞–Ω–Ω—ã–µ —Ç—Ä—É–±–æ–ø—Ä–æ–≤–æ–¥–æ–≤ –∏–∑ –±–∞–∑—ã:', pipelines);
        return pipelines.map(pipeline => ({
            from: pipeline.from_point_id,
            to: pipeline.to_point_id,
            company: pipeline.company
        }));
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä—É–±–æ–ø—Ä–æ–≤–æ–¥–∞—Ö:', error);
        return [];
    }
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ—á–µ–∫
async function fetchPointsFromDB() {
    try {
        const response = await fetch('database/getData.php?table=Points');
        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status}`);
        }
        const points = await response.json();
        console.log('–î–∞–Ω–Ω—ã–µ —Ç–æ—á–µ–∫ –∏–∑ –±–∞–∑—ã:', points);
        return points.map(point => ({
            id: point.id,
            name: point.name,
            coords: point.lat && point.lng ? [point.lat, point.lng] : null // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        }));
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ—á–∫–∞—Ö:', error);
        return [];
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–µ—Ä–µ–¥–∞—á–µ –Ω–µ—Ñ—Ç–∏
async function fetchOilTransferFromDB(year, month) {
    try {
        const response = await fetch(`database/getData.php?table=oiltransfer&year=${year}&month=${month}`);
        if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status}`);

        const data = await response.json();
        console.log("üîç –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", data);

        if (!Array.isArray(data)) {
            console.error("‚ùå –û–®–ò–ë–ö–ê: `data` –Ω–µ –º–∞—Å—Å–∏–≤!", data);
            return [];
        }

        let results = [];

        data.forEach(record => {
            let isSpecialSource = (record.from_point_id == 12 || record.from_point_id == 11); // –ü–°–ü 45 –∏ –ñ–∞–Ω–∞ –ñ–æ–ª

            // –ö–µ–Ω–∫–∏—è–∫ (id = 5) –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è, –Ω–æ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö
            if (record.to_point_id === 5) {
                console.log(`üìå –ö–µ–Ω–∫–∏—è–∫ (id 5) –ø–æ–ª—É—á–∏—Ç –Ω–µ—Ñ—Ç—å –æ—Ç ${record.from_point_id}: ${record.from_amount} —Ç–Ω`);
            }

            // –û–±—ã—á–Ω–∞—è –∑–∞–ø–∏—Å—å (–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–µ—Ñ—Ç–∏)
            results.push({
                id: record.id,
                from_point: record.from_point_id,
                to_point: record.to_point_id,
                from_amount: record.from_amount,
                to_amount: record.to_amount,
                losses: record.losses || 0
            });

            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –ü–°–ü 45 –∏ –ñ–∞–Ω–∞ –ñ–æ–ª –≤ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
            if (isSpecialSource) {
                results.push({
                    id: `${record.id}-sent`,
                    from_point: record.from_point_id,
                    to_point: record.to_point_id, // –û—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É, –Ω–µ—Ñ—Ç—å –¥–æ–ª–∂–Ω–∞ –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
                    from_amount: record.from_amount,
                    to_amount: record.from_amount, // –î—É–±–ª–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–ª–æ—Å—å
                    losses: 0
                });
            }
        });

        console.log("üìä –ò—Ç–æ–≥–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏:", results);
        return results;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–µ—Ä–µ–¥–∞—á–µ –Ω–µ—Ñ—Ç–∏:', error);
        return [];
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
async function initializeMap() {
    const points = await fetchPointsFromDB();
    const oilTransferData = await fetchOilTransferFromDB();

    if (points.length === 0 || oilTransferData.length === 0) {
        console.error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∫–∞—Ä—Ç—ã.');
        return;
    }

    addMinimalistFlow(points, oilTransferData);

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –º–µ—Ç–æ–∫
    const style = document.createElement('style');
    style.innerHTML = `
    .oil-label div {
        font-size: 12px;
        font-weight: bold;
        color: black;
        padding: 2px 5px;
        border-radius: 4px;
        text-align: center;
        white-space: nowrap;
    }
    `;
    document.head.appendChild(style);
}

// –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
initializeMap();


//----------------------------------–¢–æ—á–∫–∏(–ú–µ—Ç–∫–∏) –Ω–∞ –∫–∞—Ä—Ç–µ-------------------------------------- 
map.createPane('pointsPane');
map.getPane('pointsPane').style.zIndex = 600; // –í—ã—Å–æ–∫–∏–π zIndex –¥–ª—è —Ç–æ—á–µ–∫

fetch('database/getData.php?table=Points')
    .then(response => response.json())
    .then(points => {
        const zoomThreshold = 7; // –£—Ä–æ–≤–µ–Ω—å –∑—É–º–∞, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ–Ω—è—é—Ç—Å—è
        let markers = [];

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞
        const screenWidth = window.innerWidth;
        const screenHeight = window.innerHeight;
        let labelOffsets, labelCloseOffsets;

        // –°–º–µ—â–µ–Ω–∏—è –¥–ª—è 1920x1080
        const labelOffsets_1920 = {
            "–ü–°–ü 45 –∫–º": { offsetLat: 0.3, offsetLng: 0 },
            "–ö–ü–û–£ –ñ–∞–Ω–∞ –ñ–æ–ª": { offsetLat: -0.5, offsetLng: 0 },
            "–ù–ü–° –∏–º. –®–º–∞–Ω–æ–≤–∞": { offsetLat: -0.5, offsetLng: 1.8 },
            "–ù–ü–° –∏–º. –ö–∞—Å—ã–º–æ–≤–∞": { offsetLat: -0.1, offsetLng: -3.1 },
            "–ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫": { offsetLat: 0.1, offsetLng: -2.4 },
            "–ì—Ä—É—à–æ–≤–∞—è": { offsetLat: -0.15, offsetLng: 2.15 },
            "–£–Ω–µ—á–∞": { offsetLat: -0.36, offsetLng: 0 },
            "–ù–∏–∫–æ–ª—å—Å–∫–æ–µ": { offsetLat: 0.3, offsetLng: 0 },
            "–ê–ª–∞—à–∞–Ω—å–∫–æ—É": { offsetLat: -0.1, offsetLng: 2.4 },
            "–ì–ù–ü–° –ê—Ç–∞—Å—É": { offsetLat: -0.1, offsetLng: 2.4 },
            "–ü–ù–•–ó": { offsetLat: 0.3, offsetLng: 0 },
            "–ì–ù–ü–° –ö—É–º–∫–æ–ª—å": { offsetLat: -0.5, offsetLng: 0 },
            "–ì–ù–ü–° –ö–µ–Ω–∫–∏—è–∫": { offsetLat: -0.1, offsetLng: 2.3 },
            "–ü–ö–û–ü": { offsetLat: -0.6, offsetLng: 0 },
            "–ü–°–ü –°–∞–º–∞—Ä–∞": { offsetLat: 0, offsetLng: 1.8 },
            "–£—Å—Ç—å-–õ—É–≥–∞": { offsetLat: -0.05, offsetLng: 1.5 },
            "–ë–æ–ª—å—à–∞—è –ß–µ—Ä–Ω–∏–≥–æ–≤–∫–∞": { offsetLat: 0.1, offsetLng: 2 },
            "–ì–ù–ü–° –∏–º. –ë. –î–∂—É–º–∞–≥–∞–ª–∏–µ–≤–∞": { offsetLat: 0.2, offsetLng: 2.5 },
            "–ö–ª–∏–Ω": { offsetLat: 0.5, offsetLng: 0 },
            "915 –∫–º –Ω/–ø—Ä.–ö–õ": { offsetLat: -0.2, offsetLng: 2.25 },
            "–ö—Ä–∞—Å–Ω–æ–∞—Ä–º–µ–π—Å–∫": { offsetLat: -0.50, offsetLng: 1.7 },
            "–†–æ–¥–∏–æ–Ω–æ–≤—Å–∫–∞—è": { offsetLat: -0.1, offsetLng: 2.5 },
            "–¢–∏—Ö–æ—Ä–µ—Ü–∫": { offsetLat: -0.1, offsetLng: 1.5 },
            "1235,3 –∫–º": { offsetLat: -0.50, offsetLng: 1.5 },
            "–õ–æ–ø–∞—Ç–∏–Ω–æ": { offsetLat: -0.5, offsetLng: 0 },
            "–ö–∞–ª–µ–π–∫–∏–Ω–æ": { offsetLat: -0.1, offsetLng: 1.5 },
            "–í–æ—Ä–æ—Ç—ã–Ω–µ—Ü": { offsetLat: -0.05, offsetLng: 1.8 },
            "–ì–æ—Ä—å–∫–∏–π": { offsetLat: 0.2, offsetLng: 1.3 },
            "–ó–∞–ª–µ—Å—å–µ": { offsetLat: -0.1, offsetLng: 1.2 },
            "–ê–Ω–¥—Ä–µ–∞–ø–æ–ª—å": { offsetLat: 0.1, offsetLng: 2 },
        };

        const labelCloseOffsets_1920 = {
            "–ü–°–ü 45 –∫–º": { offsetLat: 0.08, offsetLng: -0.07 },
            "–ö–ü–û–£ –ñ–∞–Ω–∞ –ñ–æ–ª": { offsetLat: -0.1, offsetLng: -0.1 },
            "–ù–ü–° –∏–º. –®–º–∞–Ω–æ–≤–∞": { offsetLat: -0.1, offsetLng: 0.2 },
            "–ù–ü–° –∏–º. –ö–∞—Å—ã–º–æ–≤–∞": { offsetLat: 0, offsetLng: -0.9 },
            "–ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫": { offsetLat: 0.1, offsetLng: -0.4 },
            "–ì—Ä—É—à–æ–≤–∞—è": { offsetLat: -0.15, offsetLng: 0.1 },
            "–£–Ω–µ—á–∞": { offsetLat: -0.1, offsetLng: -0.2 },
            "–ù–∏–∫–æ–ª—å—Å–∫–æ–µ": { offsetLat: 0.15, offsetLng: 0 },
            "–ê–ª–∞—à–∞–Ω—å–∫–æ—É": { offsetLat: 0, offsetLng: 0.4 },
            "–ì–ù–ü–° –ê—Ç–∞—Å—É": { offsetLat: 0, offsetLng: 0.4 },
            "–ü–ù–•–ó": { offsetLat: 0.15, offsetLng: 0 },
            "–ì–ù–ü–° –ö—É–º–∫–æ–ª—å": { offsetLat: -0.1, offsetLng: -0.1 },
            "–ì–ù–ü–° –ö–µ–Ω–∫–∏—è–∫": { offsetLat: 0.05, offsetLng: 0.35 },
            "–ü–ö–û–ü": { offsetLat: -0.1, offsetLng: -0.1 },
            "–ü–°–ü –°–∞–º–∞—Ä–∞": { offsetLat: 0, offsetLng: 0.25 },
            "–£—Å—Ç—å-–õ—É–≥–∞": { offsetLat: -0.05, offsetLng: 1.1 },
            "–ë–æ–ª—å—à–∞—è –ß–µ—Ä–Ω–∏–≥–æ–≤–∫–∞": { offsetLat: 0.1, offsetLng: 0.25 },
            "–ì–ù–ü–° –∏–º. –ë. –î–∂—É–º–∞–≥–∞–ª–∏–µ–≤–∞": { offsetLat: 0.1, offsetLng: 0.35 },
            "–ö–ª–∏–Ω": { offsetLat: 0.15, offsetLng: 0 },
            "915 –∫–º –Ω/–ø—Ä.–ö–õ": { offsetLat: -0.05, offsetLng: 0.35 },
            "–ö—Ä–∞—Å–Ω–æ–∞—Ä–º–µ–π—Å–∫": { offsetLat: 0, offsetLng: 0.35 },
            "–†–æ–¥–∏–æ–Ω–æ–≤—Å–∫–∞—è": { offsetLat: 0, offsetLng: 0.35 },
            "–¢–∏—Ö–æ—Ä–µ—Ü–∫": { offsetLat: 0, offsetLng: 0.2 },
            "1235,3 –∫–º": { offsetLat: 0.1, offsetLng: 0.2 }
        };

        // –°–º–µ—â–µ–Ω–∏—è –¥–ª—è 2560x1600
        const labelOffsets_2560 = {
            "–ü–°–ü 45 –∫–º": { offsetLat: 0.15, offsetLng: 0 },
            "–ö–ü–û–£ –ñ–∞–Ω–∞ –ñ–æ–ª": { offsetLat: -0.35, offsetLng: 0 },
            "–ù–ü–° –∏–º. –®–º–∞–Ω–æ–≤–∞": { offsetLat: -0.25, offsetLng: 1.8 },
            "–ù–ü–° –∏–º. –ö–∞—Å—ã–º–æ–≤–∞": { offsetLat: -0.1, offsetLng: -2.1 },
            "–ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫": { offsetLat: 0.1, offsetLng: -1.4 },
            "–ì—Ä—É—à–æ–≤–∞—è": { offsetLat: -0.15, offsetLng: 1.15 },
            "–£–Ω–µ—á–∞": { offsetLat: -0.25, offsetLng: 0 },
            "–ù–∏–∫–æ–ª—å—Å–∫–æ–µ": { offsetLat: 0.15, offsetLng: 0 },
            "–ê–ª–∞—à–∞–Ω—å–∫–æ—É": { offsetLat: -0.1, offsetLng: 1.4 },
            "–ì–ù–ü–° –ê—Ç–∞—Å—É": { offsetLat: -0.1, offsetLng: 1.4 },
            "–ü–ù–•–ó": { offsetLat: 0.15, offsetLng: 0 },
            "–ì–ù–ü–° –ö—É–º–∫–æ–ª—å": { offsetLat: -0.35, offsetLng: 0 },
            "–ì–ù–ü–° –ö–µ–Ω–∫–∏—è–∫": { offsetLat: -0.1, offsetLng: 1.6 },
            "–ü–ö–û–ü": { offsetLat: -0.4, offsetLng: 0 },
            "–ü–°–ü –°–∞–º–∞—Ä–∞": { offsetLat: 0, offsetLng: 1.3 },
            "–£—Å—Ç—å-–õ—É–≥–∞": { offsetLat: -0.05, offsetLng: 1.1 },
            "–ë–æ–ª—å—à–∞—è –ß–µ—Ä–Ω–∏–≥–æ–≤–∫–∞": { offsetLat: 0.1, offsetLng: 1.15 },
            "–ì–ù–ü–° –∏–º. –ë. –î–∂—É–º–∞–≥–∞–ª–∏–µ–≤–∞": { offsetLat: 0.2, offsetLng: 1.5 },
            "–ö–ª–∏–Ω": { offsetLat: 0.15, offsetLng: 0 },
            "915 –∫–º –Ω/–ø—Ä.–ö–õ": { offsetLat: -0.2, offsetLng: 1.5 },
            "–ö—Ä–∞—Å–Ω–æ–∞—Ä–º–µ–π—Å–∫": { offsetLat: -0.1, offsetLng: 1.7 },
            "–†–æ–¥–∏–æ–Ω–æ–≤—Å–∫–∞—è": { offsetLat: -0.1, offsetLng: 1.5 },
            "–¢–∏—Ö–æ—Ä–µ—Ü–∫": { offsetLat: -0.1, offsetLng: 1 },
            "1235,3 –∫–º": { offsetLat: -0.07, offsetLng: 1.1 }
        };

        const labelCloseOffsets_2560 = {
            "–ü–°–ü 45 –∫–º": { offsetLat: 0.08, offsetLng: -0.07 },
            "–ö–ü–û–£ –ñ–∞–Ω–∞ –ñ–æ–ª": { offsetLat: -0.1, offsetLng: -0.1 },
            "–ù–ü–° –∏–º. –®–º–∞–Ω–æ–≤–∞": { offsetLat: -0.1, offsetLng: 0.2 },
            "–ù–ü–° –∏–º. –ö–∞—Å—ã–º–æ–≤–∞": { offsetLat: 0, offsetLng: -0.9 },
            "–ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫": { offsetLat: 0.1, offsetLng: -0.4 },
            "–ì—Ä—É—à–æ–≤–∞—è": { offsetLat: -0.15, offsetLng: 0.1 },
            "–£–Ω–µ—á–∞": { offsetLat: -0.1, offsetLng: -0.2 },
            "–ù–∏–∫–æ–ª—å—Å–∫–æ–µ": { offsetLat: 0.15, offsetLng: 0 },
            "–ê–ª–∞—à–∞–Ω—å–∫–æ—É": { offsetLat: 0, offsetLng: 0.4 },
            "–ì–ù–ü–° –ê—Ç–∞—Å—É": { offsetLat: 0, offsetLng: 0.4 },
            "–ü–ù–•–ó": { offsetLat: 0.15, offsetLng: 0 },
            "–ì–ù–ü–° –ö—É–º–∫–æ–ª—å": { offsetLat: -0.1, offsetLng: -0.1 },
            "–ì–ù–ü–° –ö–µ–Ω–∫–∏—è–∫": { offsetLat: 0.05, offsetLng: 0.35 },
            "–ü–ö–û–ü": { offsetLat: -0.1, offsetLng: -0.1 },
            "–ü–°–ü –°–∞–º–∞—Ä–∞": { offsetLat: 0, offsetLng: 0.25 },
            "–£—Å—Ç—å-–õ—É–≥–∞": { offsetLat: -0.05, offsetLng: 1.1 },
            "–ë–æ–ª—å—à–∞—è –ß–µ—Ä–Ω–∏–≥–æ–≤–∫–∞": { offsetLat: 0.1, offsetLng: 0.25 },
            "–ì–ù–ü–° –∏–º. –ë. –î–∂—É–º–∞–≥–∞–ª–∏–µ–≤–∞": { offsetLat: 0.1, offsetLng: 0.35 },
            "–ö–ª–∏–Ω": { offsetLat: 0.15, offsetLng: 0 },
            "915 –∫–º –Ω/–ø—Ä.–ö–õ": { offsetLat: -0.05, offsetLng: 0.35 },
            "–ö—Ä–∞—Å–Ω–æ–∞—Ä–º–µ–π—Å–∫": { offsetLat: 0, offsetLng: 0.35 },
            "–†–æ–¥–∏–æ–Ω–æ–≤—Å–∫–∞—è": { offsetLat: 0, offsetLng: 0.35 },
            "–¢–∏—Ö–æ—Ä–µ—Ü–∫": { offsetLat: 0, offsetLng: 0.2 },
            "1235,3 –∫–º": { offsetLat: 0.1, offsetLng: 0.2 }
        };

        // –í—ã–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        if (screenWidth >= 2560 && screenHeight >= 1600) {
            labelOffsets = labelOffsets_2560;
            labelCloseOffsets = labelCloseOffsets_2560;
        } else {
            labelOffsets = labelOffsets_1920;
            labelCloseOffsets = labelCloseOffsets_1920;
        }

        points.forEach(point => {
            if (point.lat && point.lng) {
                // –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä–∫–µ—Ä
                const marker = L.circleMarker([point.lat, point.lng], {
                    pane: 'pointsPane',
                    radius: 6,
                    color: 'black',
                    weight: 2,
                    fillColor: point.color,
                    fillOpacity: 1
                }).addTo(map);

                // –ü–æ–ª—É—á–∞–µ–º —Å–º–µ—â–µ–Ω–∏—è –¥–ª—è –¥–∞–ª—å–Ω–µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
                const offsetFar = labelOffsets[point.name] || { offsetLat: 0, offsetLng: 0 };
                const latFar = point.lat + offsetFar.offsetLat;
                const lngFar = point.lng + offsetFar.offsetLng;

                // –ü–æ–ª—É—á–∞–µ–º —Å–º–µ—â–µ–Ω–∏—è –¥–ª—è –±–ª–∏–∂–Ω–µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
                const offsetClose = labelCloseOffsets[point.name] || { offsetLat: 0, offsetLng: 0 };
                const latClose = point.lat + offsetClose.offsetLat;
                const lngClose = point.lng + offsetClose.offsetLng;

                // –°–º–µ—â–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–¥–∞–ª—å–Ω—è—è –º–µ—Ç–∫–∞)
                const labelFar = L.marker([latFar, lngFar], {
                    pane: 'pointsPane',
                    icon: L.divIcon({
                        className: 'marker-label far-label',
                        html: `<div>${point.name}</div>`,
                        iconSize: null,
                        iconAnchor: [60, 15]
                    }),
                }).addTo(map);

                // –ë–ª–∏–∂–Ω–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–º –º–∞—Å—à—Ç–∞–±–µ, –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç–æ)
                const labelClose = L.marker([latClose, lngClose], {
                    pane: 'pointsPane',
                    icon: L.divIcon({
                        className: 'marker-label close-label',
                        html: `<div>${point.name}</div>`,
                        iconSize: null,
                        iconAnchor: [40, 10]
                    })
                }).addTo(map);
                labelClose.getElement().style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º –±–ª–∏–∂–Ω–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

                markers.push({ name: point.name, marker, labelFar, labelClose });
            } else {
                console.warn(`–ü—Ä–æ–ø—É—â–µ–Ω–∞ —Ç–æ—á–∫–∞ —Å ID ${point.id} –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.`);
            }
        });

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–∞—Å—à—Ç–∞–±–∞
        function updateLabelsOnZoom() {
            const currentZoom = map.getZoom();
            markers.forEach(markerObj => {
                if (currentZoom >= zoomThreshold) {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–∏–∂–Ω–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å–∫—Ä—ã–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–µ
                    markerObj.labelFar.getElement().style.display = 'none';
                    markerObj.labelClose.getElement().style.display = 'block';
                } else {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å–∫—Ä—ã–≤–∞–µ–º –±–ª–∏–∂–Ω–µ–µ
                    markerObj.labelFar.getElement().style.display = 'block';
                    markerObj.labelClose.getElement().style.display = 'none';
                }
            });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–∞—Å—à—Ç–∞–±–∞
        map.on('zoomend', updateLabelsOnZoom);

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏–∫—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        updateLabelsOnZoom();
    })
    .catch(error => console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error));


    
//--------------------------–†–µ–∑–µ—Ä–≤—É–∞—Ä—ã----------------------------

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–º–µ—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞
const reservoirOffsets = {
    1: { start: { lat: 0.15, lng: -0.07 }, end: { lat: 0.15, lng: 0.07 } },
    2: { start: { lat: 0.15, lng: -0.07 }, end: { lat: 0.15, lng: 0.07 } },
    3: { start: { lat: 0.15, lng: -0.07 }, end: { lat: 0.15, lng: 0.07 } },
    4: { start: { lat: 0.15, lng: -0.07 }, end: { lat: 0.15, lng: 0.07 } },
    5: { start: { lat: 0.1, lng: -0.1 }, end: { lat: 0.1, lng: 0.1 } }, // –î–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤
    6: { start: { lat: 0.1, lng: -0.1 }, end: { lat: 0.1, lng: 0.1 } }, // –î–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏
function getFillPercentage(volume, maxCapacity) {
    return Math.min(100, (volume / maxCapacity) * 100); // –ù–µ –±–æ–ª—å—à–µ 100%
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∫–æ–Ω–∫–∏ —Å —á–µ—Ä–Ω—ã–º/–±–µ–ª—ã–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º –¥–ª—è –¥–≤—É—Ö —Ç–∏–ø–æ–≤ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤
function createReservoirIcon(fillPercentage, width, height, type) {
    // –¶–≤–µ—Ç —Ä–∞–º–∫–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞
    const borderColor = type === 0 ? "rgba(192, 38, 38, 0.99)" : "brown";

    return L.divIcon({
        html: `<div style="position: relative; width: ${width}px; height: ${height}px; border: 2px solid ${borderColor}; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);">
                    <div style="position: absolute; width: 100%; height: 100%; background: white;"></div>
                    <div style="position: absolute; width: 100%; height: ${fillPercentage}%; background: black; bottom: 0;"></div>
               </div>`,
        iconSize: [width, height],
        className: '',
    });
}


// –°–æ–∑–¥–∞—ë–º —Å–ª–æ–∏ –¥–ª—è —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤
const pointTanksLayer = L.layerGroup(); // –¢–æ—á–µ—á–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä—ã
const technicalTanksLayer = L.layerGroup(); // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä—ã

function addReservoirs(reservoirs) {
    pointTanksLayer.clearLayers();
    technicalTanksLayer.clearLayers();

    reservoirs.forEach(reservoir => {
        const volumeData = {
            start_volume: reservoir.start_volume || 0,
            end_volume: reservoir.end_volume || 0
        };

        const coordStart = [reservoir.lat, reservoir.lng];
        const coordEnd = [reservoir.end_lat, reservoir.end_lng];

        const offset = reservoirOffsets[reservoir.id] || { start: { lat: 0.05, lng: 0 }, end: { lat: 0.05, lng: 0 } };
        const coordStartLabel = [coordStart[0] + offset.start.lat, coordStart[1] + offset.start.lng];
        const coordEndLabel = [coordEnd[0] + offset.end.lat, coordEnd[1] + offset.end.lng];

        let maxCapacity = 10000;
        if (reservoir.name.includes("–®–º–∞–Ω–æ–≤–∞")) maxCapacity = 5000;
        else if (reservoir.name.includes("–ö—É–º–æ–ª—å")) maxCapacity = 15000;

        const startFill = getFillPercentage(volumeData.start_volume, maxCapacity);
        const endFill = getFillPercentage(volumeData.end_volume, maxCapacity);

        const layer = reservoir.type === 0 ? pointTanksLayer : technicalTanksLayer;

        // –ú–∞—Ä–∫–µ—Ä—ã
        L.marker(coordStart, {
            icon: createReservoirIcon(startFill, 25, 40, reservoir.type)
        }).bindPopup(`<strong>${reservoir.name}</strong><br>–ù–∞—á–∞–ª–æ: ${volumeData.start_volume} / ${maxCapacity} –º¬≥`)
          .addTo(layer);

        L.marker(coordEnd, {
            icon: createReservoirIcon(endFill, 25, 40, reservoir.type)
        }).bindPopup(`<strong>${reservoir.name}</strong><br>–ö–æ–Ω–µ—Ü: ${volumeData.end_volume} / ${maxCapacity} –º¬≥`)
          .addTo(layer);

        // –õ–∏–Ω–∏–∏
        L.polyline([coordStart, coordEnd], {
            color: '#722600', weight: 4, opacity: 0.7
        }).addTo(layer);

        L.polyline([coordStart, coordStartLabel], {
            color: 'black', weight: 2, opacity: 0.8, dashArray: '4,2'
        }).addTo(layer);

        L.polyline([coordEnd, coordEndLabel], {
            color: 'black', weight: 2, opacity: 0.8, dashArray: '4,2'
        }).addTo(layer);

        // –ü–æ–¥–ø–∏—Å–∏
        L.marker(coordStartLabel, {
            icon: L.divIcon({
                html: `<div style="white-space: nowrap; font-weight: bold;">${volumeData.start_volume} –º¬≥</div>`,
                className: ''
            })
        }).addTo(layer);

        L.marker(coordEndLabel, {
            icon: L.divIcon({
                html: `<div style="white-space: nowrap; font-weight: bold;">${volumeData.end_volume} –º¬≥</div>`,
                className: ''
            })
        }).addTo(layer);
    });

// –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω —á–µ–∫–±–æ–∫—Å
const checkbox = document.getElementById('checkboxTwo');
if (checkbox && checkbox.checked) {
    map.addLayer(pointTanksLayer);
    map.addLayer(technicalTanksLayer);
}

}

document.getElementById('checkboxTwo').addEventListener('change', async function () {
    if (this.checked) {
        // –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ä–µ–∑–µ—Ä–≤—É–∞—Ä—ã –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏
        const [year, month] = document.getElementById('month-input').value.split('-');
        const reservoirs = await fetchReservoirVolumesFromDB(year, month);
        addReservoirs(reservoirs);
    } else {
        // –£–¥–∞–ª—è–µ–º —Å –∫–∞—Ä—Ç—ã
        map.removeLayer(pointTanksLayer);
        map.removeLayer(technicalTanksLayer);
    }
});






// // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ –∏ –∏—Ö –æ–±—ä–µ–º–æ–≤ –∏–∑ –±–∞–∑—ã
// fetch('database/getData.php?table=Reservoirs')
//     .then(response => response.json())
//     .then(reservoirs => {
//         fetch('database/getData.php?table=reservoirvolumes')
//             .then(response => response.json())
//             .then(volumes => {
//                 const latestVolumes = {};
//                 volumes.forEach(volume => {
//                     latestVolumes[volume.reservoir_id] = {
//                         start_volume: volume.start_volume,
//                         end_volume: volume.end_volume
//                     };
//                 });

//                 reservoirs.forEach(reservoir => {
//                     const volumeData = latestVolumes[reservoir.id] || { start_volume: 0, end_volume: 0 };
//                     const coordStart = [reservoir.coords_start_latitude, reservoir.coords_start_longitude];
//                     const coordEnd = [reservoir.coords_end_latitude, reservoir.coords_end_longitude];

//                     const offset = reservoirOffsets[reservoir.id] || { start: { lat: 0.05, lng: 0 }, end: { lat: 0.05, lng: 0 } };
//                     const coordStartLabel = [coordStart[0] + offset.start.lat, coordStart[1] + offset.start.lng];
//                     const coordEndLabel = [coordEnd[0] + offset.end.lat, coordEnd[1] + offset.end.lng];


//                     //--------------------------------------------------------–¢—É—Ç –ø—Ä–æ—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–ª—á–∏–µ—Å—Ç–≤–æ –ø–æ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞–º!!!!
//                     let maxCapacity = 10000; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 —Ç—ã—Å. —Ç–æ–Ω–Ω
//                     if (reservoir.name.includes("–ö–µ–Ω–∫–∏—è–∫-–®–º–∞–Ω–æ–≤–∞")) {
//                         maxCapacity = 5000;
//                     } else if (reservoir.name.includes("–ö–µ–Ω–∫–∏—è–∫-–ö—É–º–æ–ª—å")) {
//                         maxCapacity = 15000;
//                     }

//                     const startFillPercentage = getFillPercentage(volumeData.start_volume, maxCapacity);
//                     const endFillPercentage = getFillPercentage(volumeData.end_volume, maxCapacity);

//                     if (reservoir.type === 0) {
//                         // –¢–æ—á–µ—á–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä—ã (–∫—Ä–∞—Å–Ω–∞—è —Ä–∞–º–∫–∞)
//                         L.marker(coordStart, { icon: createReservoirIcon(startFillPercentage, 25, 40, reservoir.type) })
//                             .bindPopup(`<strong>${reservoir.name}</strong><br>–ù–∞—á–∞–ª–æ: ${volumeData.start_volume} / ${maxCapacity} –º¬≥`)
//                             .addTo(pointTanksLayer);
                    
//                         L.marker(coordEnd, { icon: createReservoirIcon(endFillPercentage, 25, 40, reservoir.type) })
//                             .bindPopup(`<strong>${reservoir.name}</strong><br>–ö–æ–Ω–µ—Ü: ${volumeData.end_volume} / ${maxCapacity} –º¬≥`)
//                             .addTo(pointTanksLayer);
//                     } else if (reservoir.type === 1) {
//                         // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä—ã (–∫–æ—Ä–∏—á–Ω–µ–≤–∞—è —Ä–∞–º–∫–∞)
//                         L.marker(coordStart, { icon: createReservoirIcon(startFillPercentage, 35, 25, reservoir.type) })
//                             .bindPopup(`<strong>${reservoir.name}</strong><br>–ù–∞—á–∞–ª–æ: ${volumeData.start_volume} / ${maxCapacity} –º¬≥`)
//                             .addTo(technicalTanksLayer);
                    
//                         L.marker(coordEnd, { icon: createReservoirIcon(endFillPercentage, 35, 25, reservoir.type) })
//                             .bindPopup(`<strong>${reservoir.name}</strong><br>–ö–æ–Ω–µ—Ü: ${volumeData.end_volume} / ${maxCapacity} –º¬≥`)
//                             .addTo(technicalTanksLayer);
//                     }
                    

//                     // –õ–∏–Ω–∏–∏ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏ (–¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤)
//                     L.polyline([coordStart, coordEnd], {
//                         color: '#722600',
//                         weight: 4,
//                         opacity: 0.7
//                     }).addTo(reservoir.type === 0 ? pointTanksLayer : technicalTanksLayer);

//                     // –õ–∏–Ω–∏–∏ –æ—Ç –º–∞—Ä–∫–µ—Ä–æ–≤ –∫ –º–µ—Ç–∫–∞–º —Å –æ–±—ä–µ–º–∞–º–∏
//                     L.polyline([coordStart, coordStartLabel], {
//                         color: 'black',
//                         weight: 2,
//                         opacity: 0.8,
//                         dashArray: '4,2'
//                     }).addTo(reservoir.type === 0 ? pointTanksLayer : technicalTanksLayer);

//                     L.polyline([coordEnd, coordEndLabel], {
//                         color: 'black',
//                         weight: 2,
//                         opacity: 0.8,
//                         dashArray: '4,2'
//                     }).addTo(reservoir.type === 0 ? pointTanksLayer : technicalTanksLayer);

//                     // –ú–µ—Ç–∫–∏ —Å –æ–±—ä–µ–º–∞–º–∏ —Ä—è–¥–æ–º —Å —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞–º–∏
//                     L.marker(coordStartLabel, {
//                         icon: L.divIcon({
//                             html: `<div style="white-space: nowrap; padding: 6x 10x; font-weight: bold; transform: translateY(-10px);">
//                                 ${volumeData.start_volume} –º¬≥
//                             </div>`,
//                             className: ''
//                         })
//                     }).addTo(reservoir.type === 0 ? pointTanksLayer : technicalTanksLayer);

//                     L.marker(coordEndLabel, {
//                         icon: L.divIcon({
//                             html: `<div style="white-space: nowrap; padding: 6x 10x; font-weight: bold; transform: translateY(-10px);">
//                                 ${volumeData.end_volume} –º¬≥
//                             </div>`,
//                             className: ''
//                         })
//                     }).addTo(reservoir.type === 0 ? pointTanksLayer : technicalTanksLayer);
//                 });

//                 updateLayerVisibility();
//             })
//             .catch(error => console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–º–æ–≤ –Ω–µ—Ñ—Ç–∏:', error));
//     })
//     .catch(error => console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤:', error));

// // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç—å—é —Å–ª–æ–µ–≤
// const minZoom = 7.5;

// function updateLayerVisibility() {
//     const currentZoom = map.getZoom();

//     if (currentZoom >= minZoom) {
//         if (!map.hasLayer(pointTanksLayer)) map.addLayer(pointTanksLayer);
//         if (!map.hasLayer(technicalTanksLayer)) map.addLayer(technicalTanksLayer);
//     } else {
//         if (map.hasLayer(pointTanksLayer)) map.removeLayer(pointTanksLayer);
//         if (map.hasLayer(technicalTanksLayer)) map.removeLayer(technicalTanksLayer);
//     }
// }

// // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å–ª–æ–µ–≤ –∫ —Å–æ–±—ã—Ç–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑—É–º–∞
// map.on('zoomend', updateLayerVisibility);

// // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏
// map.on('load', updateLayerVisibility);

// // –í—ã–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
// updateLayerVisibility();







//--------------------------–õ–∏–Ω–∏–∏ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏-------------------------------------

map.createPane('linesPane');
map.getPane('linesPane').style.zIndex = 400; // –ù–∏–∑–∫–∏–π zIndex –¥–ª—è –ª–∏–Ω–∏–π

// –û–±—ä–µ–∫—Ç —Ü–≤–µ—Ç–æ–≤ –∫–æ–º–ø–∞–Ω–∏–π
const companyColors = {
    "–ê–û –ö–∞–∑–¢—Ä–∞–Ω—Å–û–π–ª": "rgb(3, 198, 252)",
    "–ü–ê–û –¢—Ä–∞–Ω—Å–Ω–µ—Ñ—Ç—å": "rgb(79, 73, 239)",
    "–¢–û–û ¬´–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–æ-–ö–∏—Ç–∞–π—Å–∫–∏–π —Ç—Ä—É–±–æ–ø—Ä–æ–≤–æ–¥¬ª": "rgb(5, 186, 53)",
    "–ê–û '–°–ó–¢–ö' –ú—É–Ω–∞–π–¢–∞—Å'": "rgb(221, 5, 221)"
};


// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∏–Ω–∏–π –Ω–∞ –∫–∞—Ä—Ç—É
async function main() {
    const pipelinesWithIds = await fetchPipelinesFromDB();
    const points = await fetchPointsFromDB();

    if (pipelinesWithIds.length === 0 || points.length === 0) {
        console.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –ª–∏–Ω–∏–π.");
        return;
    }

    pipelinesWithIds.forEach(({ from, to, company }) => {
        const point1 = points.find(p => p.id === from);
        const point2 = points.find(p => p.id === to);

        if (!point1 || !point2) {
            console.warn(`–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ç–æ—á–∫–∏: from=${from}, to=${to}`);
            return;
        }

        if (!point1.coords || !point2.coords) {
            console.warn(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ç–æ—á–µ–∫: from=${from}, to=${to}`);
            return;
        }

        const mainLineColor = companyColors[company] || "black";

        // –û—Å–Ω–æ–≤–Ω–∞—è –ª–∏–Ω–∏—è
        const mainLine = L.polyline([point1.coords, point2.coords], {
            pane: 'linesPane', 
            color: mainLineColor,
            weight: 6,
            opacity: 0.8,
        }).addTo(map);

        // –ü—É–Ω–∫—Ç–∏—Ä–Ω–∞—è –ª–∏–Ω–∏—è
        const dashedLine = L.polyline([point1.coords, point2.coords], {
            pane: 'linesPane', 
            color: "black",
            weight: 3,
            dashArray: "10, 10",
            opacity: 1,
            className: "dashed-line",
        }).addTo(map);

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ–ª–æ–∫, –µ—Å–ª–∏ –æ–Ω–∏ –Ω—É–∂–Ω—ã
        const noArrowLines = [
            { from: 12, to: 5 },
            { from: 11, to: 5 },
            { from: 7, to: 19 },
            { from: 24, to: 13 },
            { from: 15, to: 9 }
        ];

        const hasArrow = !noArrowLines.some(line => line.from === from && line.to === to);

        if (hasArrow) {
            const arrowDecorator = L.polylineDecorator(mainLine, {
                patterns: [
                    {
                        offset: '50%',
                        repeat: 0,
                        symbol: L.Symbol.arrowHead({
                            pixelSize: 8,
                            pathOptions: { color: mainLineColor, fillOpacity: 1 }
                        })
                    }
                ]
            }).addTo(map);
        }
    });
}

// –í—ã–∑–æ–≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main();





//----------------------------------–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ö–æ–¥–∞ –Ω–µ—Ñ—Ç–∏ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Å—Ç—Ä–µ–ª–æ–∫-------------------------------

// –°–æ–∑–¥–∞–µ–º —Å–ª–æ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–∏–Ω–∏–π –∏ –º–µ—Ç–æ–∫
const flowLayerGroup = L.layerGroup();
const minimalistFlowLayerGroup = L.layerGroup();
let flowLayerVisible = false; 
let dataLoaded = false; 

// –£–±–∏—Ä–∞–µ–º —Å–ª–æ–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
map.removeLayer(minimalistFlowLayerGroup);
document.getElementById('checkboxOne').checked = false; 

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è —Ç–æ—á–µ–∫ (—Å–º–µ—â–µ–Ω–∏—è –ø–æ —à–∏—Ä–æ—Ç–µ –∏ –¥–æ–ª–≥–æ—Ç–µ)
const directionOffsets = {
    1: { lat: 0.5, lng: 0.3 },   // –ê–ª–∞—à–∞–Ω—å–∫–æ—É
    2: { lat: 0.2, lng: 0.5 },    // –ê—Ç–∞—Å—É
    3: { lat: 0.5, lng: 0.3 },    // –ü–ù–•–ó
    4: { lat: 0.5, lng: 0.3 },   // –ö—É–º–∫–æ–ª—å
    5: { lat: 0.2, lng: 0.5 },   // –ö–µ–Ω–∫–∏—è–∫
    6: { lat: 0.2, lng: 0.3 },   // –ü–ö–û–ü
    7: { lat: 0.4, lng: 0.2 },   // –®–º–∞–Ω–æ–≤–∞
    8: { lat: 0.2, lng: 0.2 },   // –°–∞–º–∞—Ä–∞
    9: { lat: -0.5, lng: -0.5 },   // –ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫
    10: { lat: 0.2, lng: 0.3 },  // –£—Å—Ç—å-–õ—É–≥–∞
    11: { lat: 0, lng: 0 }, // –ñ–∞–Ω–∞ –ñ–æ–ª
    12: { lat: 0, lng: 0 }, // –ü–°–ü 45 
    19: { lat: -0.3, lng: -0.2 },  // –ö–∞—Å—ã–º–æ–≤–∞
    24: { lat: -0.3, lng: 0.6 },  // 1235
};

function findFreePosition(coords, layerGroup, pointId) {
    if (pointId === 5) return null; // –ò—Å–∫–ª—é—á–∞–µ–º –ö–µ–Ω–∫–∏—è–∫

    const baseOffset = 0.5; // –ë–∞–∑–æ–≤–æ–µ —Å–º–µ—â–µ–Ω–∏–µ
    const defaultDirections = [
        [baseOffset, baseOffset],   
        [baseOffset, -baseOffset],  
        [-baseOffset, baseOffset],  
        [-baseOffset, -baseOffset],
        [0, baseOffset],
        [baseOffset, 0],
        [0, -baseOffset],
        [-baseOffset, 0]
    ];

    const customOffset = directionOffsets[pointId] || { lat: 0, lng: 0 };

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–∞—á–∏–Ω–∞—è —Å –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ, –∑–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
    const directions = [
        [customOffset.lat, customOffset.lng],
        ...defaultDirections
    ];

    for (let i = 0; i < directions.length; i++) {
        const offsetLat = directions[i][0];
        const offsetLng = directions[i][1];

        // –ß–µ–º –¥–∞–ª—å—à–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ, —Ç–µ–º —Å–∏–ª—å–Ω–µ–µ —Å–º–µ—â–∞–µ–º (—É–º–Ω–æ–∂–∞–µ–º)
        const scale = 1 + i * 0.2; 

        const candidateCoords = [
            coords[0] + offsetLat * scale,
            coords[1] + offsetLng * scale
        ];

        const isOverlapping = Array.from(layerGroup.getLayers()).some(layer => {
            if (layer.getLatLng) {
                const layerCoords = layer.getLatLng();
                return (
                    Math.abs(layerCoords.lat - candidateCoords[0]) < baseOffset / 2 &&
                    Math.abs(layerCoords.lng - candidateCoords[1]) < baseOffset / 2
                );
            }
            if (layer instanceof L.Polyline) {
                const latlngs = layer.getLatLngs();
                return latlngs.some(latlng =>
                    Math.abs(latlng.lat - candidateCoords[0]) < baseOffset / 2 &&
                    Math.abs(latlng.lng - candidateCoords[1]) < baseOffset / 2
                );
            }
            return false;
        });

        if (!isOverlapping) {
            return candidateCoords;
        }
    }

    // –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ ‚Äî —Å—Ç–∞–≤–∏–º –¥–∞–ª–µ–∫–æ
    return [coords[0] + baseOffset * 2, coords[1] + baseOffset * 2];
}


function findFreePositionWithIndex(coords, layerGroup, pointId, usageIndex) {
    if (pointId === 5) return null;

    const baseOffset = 0.5;

    const baseDirections = [
        [1, 1],
        [1, -1],
        [-1, 1],
        [-1, -1],
        [0, 1],
        [1, 0],
        [0, -1],
        [-1, 0]
    ];

    const customOffset = directionOffsets[pointId] || { lat: 0, lng: 0 };
    const hasCustom = customOffset.lat !== 0 || customOffset.lng !== 0;

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ
    const directions = hasCustom
        ? [[customOffset.lat, customOffset.lng], ...baseDirections]
        : [...baseDirections];

    const dir = directions[usageIndex % directions.length];
    const scale = 1 + Math.floor(usageIndex / directions.length) * 0.4; // —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ –º–µ—Ä–µ —Ä–æ—Å—Ç–∞

    const candidateCoords = [
        coords[0] + dir[0] * baseOffset * scale,
        coords[1] + dir[1] * baseOffset * scale
    ];

    return candidateCoords;
}



function addMinimalistFlow(points, oilTransferData) {
    minimalistFlowLayerGroup.clearLayers();

    if (!flowLayerVisible) return;

    const uniqueEntries = new Set();  
    const pointUsageCounter = {}; // –°—á—ë—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ—á–µ–∫

    oilTransferData.forEach(record => {
        const isSpecialSource = (record.from_point === 12 || record.from_point === 11);

        // –ò—Å–∫–ª—é—á–∞–µ–º –ö–µ–Ω–∫–∏—è–∫ –∫–∞–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è, –Ω–æ –Ω–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        if (record.to_point === 5) {
            console.log(`‚õî –ö–µ–Ω–∫–∏—è–∫ (id 5) –∏—Å–∫–ª—é—á–µ–Ω, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑ ${record.from_point} —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è.`);
        }

        const pointId = isSpecialSource ? record.from_point : record.to_point;
        const point = points.find(p => p.id === pointId);

        if (!point || !point.coords) {
            console.warn(`‚ö†Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: ${pointId}`);
            return;
        }

        console.log(`‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ—á–∫—É ${pointId}: ${isSpecialSource ? '–û—Ç–ø—Ä–∞–≤–∫–∞' : '–ü—Ä–∏–µ–º'} - ${record.from_amount} —Ç–Ω`);

        const recordKey = `${pointId}-${record.from_amount}`;
        if (uniqueEntries.has(recordKey)) return;
        uniqueEntries.add(recordKey);

        // –°—á—ë—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–æ—á–∫–∏
        if (!pointUsageCounter[pointId]) pointUsageCounter[pointId] = 0;
        const usageIndex = pointUsageCounter[pointId]++;
        
        // –ü–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ —Å —É—á—ë—Ç–æ–º –∏–Ω–¥–µ–∫—Å–∞
        const labelPosition = findFreePositionWithIndex(point.coords, minimalistFlowLayerGroup, pointId, usageIndex);
        if (!labelPosition) return;

        const markerHtml = `<div>${record.from_amount} —Ç–Ω</div>`;

        // –ß–µ—Ä–Ω–∞—è –ø—É–Ω–∫—Ç–∏—Ä–Ω–∞—è –ª–∏–Ω–∏—è
        L.polyline([point.coords, labelPosition], {
            color: 'black',
            weight: 2,
            dashArray: '5, 5',
            opacity: 0.8,
        }).addTo(minimalistFlowLayerGroup);

        // –ú–µ—Ç–∫–∞ –æ–±—ä–µ–º–∞
        L.marker(labelPosition, {
            icon: L.divIcon({
                className: 'flow-label',
                html: markerHtml,
                iconSize: null,
                iconAnchor: [4, 18],
            }),
        }).addTo(minimalistFlowLayerGroup);
    });

    map.addLayer(minimalistFlowLayerGroup);
}





// –°—Ç–∏–ª–∏ –¥–ª—è –º–µ—Ç–æ–∫
const style = document.createElement('style');
style.innerHTML = `
.flow-label div {
    font-size: 14px;
    font-weight: bold;
    color: white; 
    text-shadow: 
        -2px -2px 0 black,  
         2px -2px 0 black,
        -2px  2px 0 black,
         2px  2px 0 black,
        -2px  0px 0 black,
         2px  0px 0 black,
         0px -2px 0 black,
         0px  2px 0 black;
    border-radius: 5px; 
    padding: 5px;
    text-align: center;
    white-space: nowrap;
}

.flow-label.sent div {
    color: red !important;
    text-shadow: 
        -2px -2px 0 black,  
         2px -2px 0 black,
        -2px  2px 0 black,
         2px  2px 0 black;
}
`;
document.head.appendChild(style);



// // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
// async function initializeMinimalistFlowMap() {


//     const points = await fetchPointsFromDB();
//     const oilTransferData = await fetchOilTransferFromDB();
//     console.log("‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ü–°–ü 45 –∏ –ñ–∞–Ω–∞ –ñ–æ–ª –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...");

// const psp45Data = oilTransferData.filter(record => record.from_point === 12 || record.to_point === 12);
// const janaJolData = oilTransferData.filter(record => record.from_point === 11 || record.to_point === 11);

// console.log("üîç –ü–°–ü 45:", psp45Data);
// console.log("üîç –ñ–∞–Ω–∞ –ñ–æ–ª:", janaJolData);
//     console.log('–¢–æ—á–∫–∏:', points);
//     console.log('–î–∞–Ω–Ω—ã–µ –æ –Ω–µ—Ñ—Ç–∏:', oilTransferData);

//     if (points.length === 0 || oilTransferData.length === 0) {
//         console.error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∫–∞—Ä—Ç—ã.');
//         return;
//     }

//     addMinimalistFlow(points, oilTransferData);
// }

// document.getElementById('checkboxOne').addEventListener('change', async function () {
//     flowLayerVisible = this.checked;

//     if (flowLayerVisible) {
//         if (!dataLoaded) {
//             await initializeMinimalistFlowMap(); 
//             dataLoaded = true;
//         }
//         map.addLayer(minimalistFlowLayerGroup); 
//     } else {
//         map.removeLayer(minimalistFlowLayerGroup); 
//     }
// });
document.getElementById('checkboxOne').addEventListener('change', async function () {
    flowLayerVisible = this.checked;

    if (flowLayerVisible) {
        if (!dataLoaded) {
            await initializeFlowMap(); // –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            dataLoaded = true;
        }
        map.addLayer(minimalistFlowLayerGroup); 
    } else {
        map.removeLayer(minimalistFlowLayerGroup); 
    }
});



//--------------------------------------–°—É–º–º–∞ –¥–ª—è –ö–µ–Ω–∫–∏—è–∫–∞--------------------------------------------
async function fetchKenkiyakOilTotal(year, month) {
    try {
        const response = await fetch(`database/getKenkiyakTotal.php?year=${year}&month=${month}`);
        if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status}`);

        const data = await response.json();
        if (data.error) throw new Error(data.error);

        console.log(`üìä –í—Å–µ–≥–æ –Ω–µ—Ñ—Ç–∏ –≤ –ö–µ–Ω–∫–∏—è–∫ –∑–∞ ${month}/${year}:`, data.total_oil);
        return data.total_oil;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –Ω–µ—Ñ—Ç–∏ –≤ –ö–µ–Ω–∫–∏—è–∫:', error);
        return 0;
    }
}



async function displayKenkiyakOilTotal(year, month, points) {
    const totalOil = await fetchKenkiyakOilTotal(year, month);
    
    if (totalOil === 0) {
        console.warn("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –Ω–µ—Ñ—Ç–∏ –¥–ª—è –ö–µ–Ω–∫–∏—è–∫–∞.");
        return;
    }

    // –ò—â–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ö–µ–Ω–∫–∏—è–∫–∞ (id = 5)
    const kenkiyakPoint = points.find(p => p.id === 5);
    if (!kenkiyakPoint || !kenkiyakPoint.coords) {
        console.error("‚ùå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ö–µ–Ω–∫–∏—è–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!");
        return;
    }

    console.log("üìå –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ö–µ–Ω–∫–∏—è–∫–∞:", kenkiyakPoint);

    // –ü–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –¥–ª—è –º–µ—Ç–∫–∏
    let labelPosition = findFreePosition(kenkiyakPoint.coords, minimalistFlowLayerGroup, 5);
    
    if (!labelPosition) {
        console.warn("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –º–µ—Ç–∫–∏ –ö–µ–Ω–∫–∏—è–∫–∞.");
        labelPosition = [kenkiyakPoint.coords[0] + 0.5, kenkiyakPoint.coords[1] + 0.5]; 
    }

    console.log(`‚úÖ –ú–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –ö–µ–Ω–∫–∏—è–∫: ${totalOil} —Ç–Ω, –ø–æ–∑–∏—Ü–∏—è:`, labelPosition);

    // –û–±—ã—á–Ω–∞—è —á–µ—Ä–Ω–∞—è –ª–∏–Ω–∏—è –æ—Ç –ö–µ–Ω–∫–∏—è–∫–∞ –∫ –º–µ—Ç–∫–µ
    L.polyline([kenkiyakPoint.coords, labelPosition], {
        color: 'black',
        weight: 2,
        dashArray: '5, 5',
        opacity: 0.8,
    }).addTo(minimalistFlowLayerGroup);

    // –ú–µ—Ç–∫–∞ —Å –æ–±—ä–µ–º–æ–º –Ω–µ—Ñ—Ç–∏
    L.marker(labelPosition, {
        icon: L.divIcon({
            className: 'flow-label',
            html: `<div>${totalOil} —Ç–Ω</div>`,
            iconSize: null,
            iconAnchor: [4, 18],
        }),
    }).addTo(minimalistFlowLayerGroup);
}





async function initializeFlowMap() {
    const monthInput = document.getElementById('month-input');
    if (!monthInput || !monthInput.value) {
        console.warn("‚ö† –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.");
        return;
    }

    const [year, month] = monthInput.value.split('-');

    const points = await fetchPointsFromDB();
    const oilTransferData = await fetchOilTransferFromDB(year, month);

    console.log(`üìå –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ç–æ—á–∫–∏:`, points);
    console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞ ${year}-${month}:`, oilTransferData);

    clearAllDataLayers(); // –æ—á–∏—â–∞–µ–º –≤—Å–µ —Å–ª–æ–∏ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

    if (points.length === 0 || oilTransferData.length === 0) {
        console.warn('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∫–∞—Ä—Ç—ã.');
        dataLoaded = false;
        return;
    }

    addMinimalistFlow(points, oilTransferData);
    await displayKenkiyakOilTotal(year, month, points);

    dataLoaded = true;
}





// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å—Ç–∏–ª–∏ flow-label, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
if (!document.getElementById('flow-label-style')) {
    const style = document.createElement('style');
    style.id = 'flow-label-style'; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ID, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
    style.innerHTML = `
    .flow-label div {
        font-size: 14px;
        font-weight: bold;
        color: white; 
        text-shadow: 
            -2px -2px 0 black,  
             2px -2px 0 black,
            -2px  2px 0 black,
             2px  2px 0 black,
            -2px  0px 0 black,
             2px  0px 0 black,
             0px -2px 0 black,
             0px  2px 0 black;
        border-radius: 5px; 
        padding: 5px;
        text-align: center;
        white-space: nowrap;
    }
    `;
    document.head.appendChild(style);
}







// //------------------------------–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ—Ñ—Ç–∏ –Ω–∞ —Ç—Ä—É–±–æ–ø—Ä–æ–≤–æ–¥–µ-------------------
// // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
// (async function initializeOutgoingOilAmounts() {
//     const points = await fetchPointsFromDB();
//     const oilTransferData = await fetchOilTransferFromDB();

//     if (points.length > 0 && oilTransferData.length > 0) {
//         addOutgoingOilAmounts(points, oilTransferData);
//         if (!document.getElementById('checkboxOne').checked) {
//             map.removeLayer(flowLayerGroup); // –ï—Å–ª–∏ —á–µ–∫–±–æ–∫—Å –≤—ã–∫–ª—é—á–µ–Ω, —Å–ª–æ–π –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç
//         }
//     } else {
//         console.error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ö–æ–¥—è—â–∏—Ö –æ–±—ä–µ–º–æ–≤ –Ω–µ—Ñ—Ç–∏.');
//     }
// })();

// document.getElementById('checkboxOne').addEventListener('change', function () {
//     if (this.checked) {
//         flowLayerGroup.addTo(map); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–æ–π
//     } else {
//         map.removeLayer(flowLayerGroup); // –°–∫—Ä—ã–≤–∞–µ–º —Å–ª–æ–π
//     }
// });

// // –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ—Ñ—Ç–∏, –∏—Å—Ö–æ–¥—è—â–µ–π –∏–∑ —Ç–æ—á–∫–∏
// async function addOutgoingOilAmounts(points, oilTransferData) {
//     outgoingFlowLayerGroup.clearLayers(); // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ —ç—Ç–æ—Ç —Å–ª–æ–π

//     const staticLabelPositions = {
//         '4-2': [47.5, 69], // –û—Ç —Ç–æ—á–∫–∏ 4 –∫ —Ç–æ—á–∫–µ 2
//         '4-3': [49.7, 72.4], // –û—Ç —Ç–æ—á–∫–∏ 4 –∫ —Ç–æ—á–∫–µ 3
//         '4-6': [45.15, 68.65], // –û—Ç —Ç–æ—á–∫–∏ 4 –∫ —Ç–æ—á–∫–µ 6
//         '5-7': [48.5, 56], // –û—Ç —Ç–æ—á–∫–∏ 5 –∫ —Ç–æ—á–∫–µ 7
//         '5-4': [48.5, 57.908], // –û—Ç —Ç–æ—á–∫–∏ 5 –∫ —Ç–æ—á–∫–µ 4
//         '8-9': [52.22, 48], // –û—Ç —Ç–æ—á–∫–∏ 8 –∫ —Ç–æ—á–∫–µ 9
//         '8-10': [53.2, 49], // –û—Ç —Ç–æ—á–∫–∏ 8 –∫ —Ç–æ—á–∫–µ 10
//     };

//     const lineColors = {
//         '4-2': 'rgb(3, 198, 252)',
//         '4-3': 'rgb(3, 198, 252)',
//         '4-6': 'rgb(3, 198, 252)',
//         '5-7': 'rgb(221, 5, 221)',
//         '5-4': 'rgb(5, 186, 53)',
//         '8-9': 'rgb(79, 73, 239)',
//         '8-10': 'rgb(79, 73, 239)',
//     };
    
//     const multiOutputPoints = [4, 5, 8]; // –¢–æ—á–∫–∏ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∏—Å—Ö–æ–¥—è—â–∏–º–∏ –ø–æ—Ç–æ–∫–∞–º–∏

//     multiOutputPoints.forEach(pointId => {
//         // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥—è—â–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ç–æ—á–∫–∏
//         const outgoingTransfers = oilTransferData.filter(record => record.from_point === pointId);

//         if (outgoingTransfers.length > 0) {
//             const fromPoint = points.find(point => point.id === pointId);

//             if (!fromPoint || !fromPoint.coords) {
//                 console.warn(`–¢–æ—á–∫–∞ —Å ID ${pointId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.`);
//                 return;
//             }

//             outgoingTransfers.forEach(transfer => {
//                 const toPoint = points.find(point => point.id === transfer.to_point);

//                 if (!toPoint || !toPoint.coords) {
//                     console.warn(`–ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ —Å ID ${transfer.to_point} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.`);
//                     return;
//                 }

//                 // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–¥–∞–Ω—ã
//                 const staticKey = `${transfer.from_point}-${transfer.to_point}`;
//                 const labelPosition = staticLabelPositions[staticKey] || [
//                     (fromPoint.coords[0] + toPoint.coords[0]) / 2,
//                     (fromPoint.coords[1] + toPoint.coords[1]) / 2,
//                 ];

//                 const labelColor = lineColors[staticKey] || 'black';

//                 // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –º–µ—Ç–∫—É —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –Ω–µ—Ñ—Ç–∏
//                 L.marker(labelPosition, {
//                     icon: L.divIcon({
//                         className: 'flow-label',
//                         html: `<div style="color: ${labelColor}; text-shadow: -1px -1px 0 black, 1px -1px 0 black, -1px 1px 0 black, 1px 1px 0 black;">${transfer.to_amount} —Ç–Ω</div>`,
//                         iconSize: null,
//                     }),
//                 }).addTo(flowLayerGroup);
//             });
//         }
//     });

//     flowLayerGroup.addTo(map); // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π –Ω–∞ –∫–∞—Ä—Ç—É
// }







//---------------------------–¢–∞–±–ª–∏—Ü–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π---------------------------

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
function updateTable(data, pointId) {
    const tableContainer = document.getElementById('info-table-container');
    const tableBody = document.getElementById('info-table').querySelector('tbody');

    // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    tableBody.innerHTML = '';

    if (!data || data.length === 0) {
        tableBody.innerHTML = '<tr><td colspan="6">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</td></tr>';
    } else {
        data.forEach(row => {
            addTableRow(row, tableBody, pointId);
        });
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    tableContainer.style.display = 'block';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É
function addTableRow(row, tableBody = null, pointId) {
    if (!tableBody) {
        tableBody = document.getElementById('info-table').querySelector('tbody');
    }

    const tr = document.createElement('tr');
    tr.dataset.id = row.id; // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID –∑–∞–ø–∏—Å–∏

    tr.innerHTML = `
        <td contenteditable="true" data-field="route" title="–ü—É—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏">
            ${row.from_name || '–ò—Å—Ç–æ—á–Ω–∏–∫'} ‚Üí ${row.to_name || '–ü–æ–ª—É—á–∞—Ç–µ–ª—å'}
        </td>
        <td contenteditable="true" data-field="amount" title="–û–±—ä–µ–º –Ω–µ—Ñ—Ç–∏ –≤ —Ç–æ–Ω–Ω–∞—Ö">${row.amount || 0}</td>
        <td contenteditable="true" data-field="losses" title="–ü–æ—Ç–µ—Ä–∏ –Ω–µ—Ñ—Ç–∏ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ">${row.losses || 0}</td>
        <td>
            <button class="save-btn">‚úîÔ∏è –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
            <button class="delete-btn">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
        </td>
    `;

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    tr.querySelector('.save-btn').addEventListener('click', () => saveRow(tr, pointId));
    tr.querySelector('.delete-btn').addEventListener('click', () => deleteRow(tr));

    tableBody.appendChild(tr);
}


// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
function saveRow(row, pointId) {
    const id = row.dataset.id;
    if (!id) {
        alert('–û—à–∏–±–∫–∞: –Ω–µ—Ç ID –∑–∞–ø–∏—Å–∏!');
        return;
    }

    const routeText = row.querySelector('[data-field="route"]').innerText.split(' ‚Üí ');
    const updatedData = {
        id: id,
        pointId: pointId,  
        from_name: routeText[0] || '',
        to_name: routeText[1] || '',
        date: new Date().toISOString().split('T')[0], 
        amount: row.querySelector('[data-field="amount"]').innerText.trim(),
        losses: row.querySelector('[data-field="losses"]').innerText.trim(),
    };

    console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', updatedData); 

    fetch('database/updateData.php', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(updatedData)
    })
    .then(response => response.text())
    .then(text => {
        console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', text); 
        return JSON.parse(text);
    })
    .then(data => {
        if (data.success) {
            alert('–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
        } else {
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: ' + (data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
        }
    })
    .catch(error => console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error));
}



// –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏
function deleteRow(row) {
    const id = row.dataset.id;
    if (!id) {
        alert('–û—à–∏–±–∫–∞: –Ω–µ—Ç ID –∑–∞–ø–∏—Å–∏!');
        return;
    }

    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å?')) return;

    fetch('database/deleteData.php', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ id: id })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            row.remove();
            alert('–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞');
        } else {
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏');
        }
    })
    .catch(error => console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error));
}

function addNewRow(pointId) {
    const newData = {
        pointId: pointId,
        pipeline_id: 1, 
        date: '–ù–æ–≤–∞—è –¥–∞—Ç–∞',
        from_name: '–ò—Å—Ç–æ—á–Ω–∏–∫',
        to_name: '–ü–æ–ª—É—á–∞—Ç–µ–ª—å',
        amount: 0,
        losses: 0
    };

    console.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', newData);

    fetch('database/addData.php', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(newData)
    })
    .then(response => response.json())
    .then(data => {
        console.log('–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);
        if (data.success) {
            newData.id = data.id; 
            addTableRow(newData, null, pointId);
            alert('–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞');
        } else {
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: ' + (data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
        }
    })
    .catch(error => console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', error));
}

let currentPointId = null; 

fetch('database/getData.php?table=Points')
    .then(response => response.json())
    .then(points => {
        points.forEach(point => {
            if (point.lat && point.lng) {
                const marker = L.circleMarker([point.lat, point.lng], {
                    pane: 'pointsPane',
                    radius: 6,
                    color: 'black',
                    weight: 2,
                    fillColor: point.color,
                    fillOpacity: 1,
                }).addTo(map);

                marker.on('click', () => {
                    currentPointId = point.id; 
                    console.log('–í—ã–±—Ä–∞–Ω–∞ —Ç–æ—á–∫–∞ —Å ID:', currentPointId);

                    fetch(`database/TableInfo.php?pointId=${point.id}`)
                        .then(response => response.json())
                        .then(data => {
                            updateTable(data, point.id);
                        })
                        .catch(error => console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ—á–∫–µ:', error));
                });
            }
        });
    })
    .catch(error => console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error));

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å"
document.getElementById('add-row-btn').addEventListener('click', () => {
    console.log('–ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å" –Ω–∞–∂–∞—Ç–∞');
    if (currentPointId) {
        addNewRow(currentPointId); 
    } else {
        alert('–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ —Ç–æ—á–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–µ');
    }
});




// //--------------------------------–ü–æ—Ç–µ—Ä–∏------------------------

// // –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ—Ç–µ—Ä—è–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—Ä—É–±–æ–ø—Ä–æ–≤–æ–¥–∞
// // –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –≤–∑—è—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –±—É–¥—É—â–µ–º
// const pipelineLosses = {
//     "7-19": 100, // –ü–æ—Ç–µ—Ä–∏ –º–µ–∂–¥—É –ù–ü–° –∏–º. –®–º–∞–Ω–æ–≤–∞ –∏ –ù–ü–° –∏–º. –ö–∞—Å—ã–º–æ–≤–∞
//     "5-7": 50,  // –ü–æ—Ç–µ—Ä–∏ –º–µ–∂–¥—É –ü–°–ü –°–∞–º–∞—Ä–∞ –∏ –ö–ª–∏–Ω
//     "5-4": 75, // –ü–æ—Ç–µ—Ä–∏ –º–µ–∂–¥—É –ö–ª–∏–Ω –∏ –ù–∏–∫–æ–ª—å—Å–∫–æ–µ
//     "14-2": 60, // –ü–æ—Ç–µ—Ä–∏ –º–µ–∂–¥—É –ù–∏–∫–æ–ª—å—Å–∫–æ–µ –∏ –£–Ω–µ—á–∞
//     // –î–æ–±–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç—Ä—É–±–æ–ø—Ä–æ–≤–æ–¥–æ–≤
// };

// const minZoomToShowLossCircles = 7.5; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑—É–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Ç–µ—Ä—å

// // –°–æ–∑–¥–∞–µ–º —Å–ª–æ–π –¥–ª—è –ø–æ—Ç–µ—Ä—å
// const lossCirclesLayer = L.layerGroup();

// pipelinesWithIds.forEach(({ from, to }, index) => {
//     const point1 = points.find(p => p.id === from);
//     const point2 = points.find(p => p.id === to);

//     if (!point1 || !point2) {
//         console.warn(`–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ç–æ—á–∫–∏ –¥–ª—è —Å–≤—è–∑–∏: ${from}-${to}`);
//         return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É —Å–≤—è–∑—å
//     }

//     const lineKey = `${from}-${to}`;
//     const loss = pipelineLosses[lineKey];

//     if (loss !== undefined) {
//         // –ü–æ–∑–∏—Ü–∏—è –Ω–∞—á–∞–ª–∞ –ª–∏–Ω–∏–∏ (—Å–µ—Ä–µ–¥–∏–Ω–∞ —Ç—Ä—É–±–æ–ø—Ä–æ–≤–æ–¥–∞)
//         const midLat = (point1.coords[0] + point2.coords[0]) / 2;
//         const midLon = (point1.coords[1] + point2.coords[1]) / 2;

//         // –í–µ–∫—Ç–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
//         const dx = point2.coords[0] - point1.coords[0];
//         const dy = point2.coords[1] - point1.coords[1];
//         const lengthOffset = 0.1; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª–∏–Ω–∞ –ª–∏–Ω–∏–∏

//         // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–∞
//         const magnitude = Math.sqrt(dx * dx + dy * dy);
//         const normalizedDx = dx / magnitude;
//         const normalizedDy = dy / magnitude;

//         // –°–º–µ—â–µ–Ω–∏–µ –ª–∏–Ω–∏–∏ –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–ª–∏–Ω—É
//         const offsetLat = midLat + normalizedDy * lengthOffset;
//         const offsetLon = midLon - normalizedDx * lengthOffset;

//         // –õ–∏–Ω–∏—è –æ—Ç —Ç—Ä—É–±–æ–ø—Ä–æ–≤–æ–¥–∞
//         const lossLine = L.polyline(
//             [[midLat, midLon], [offsetLat, offsetLon]],
//             { color: 'red', weight: 2, dashArray: '5' } // –°—Ç–∏–ª—å –ª–∏–Ω–∏–∏
//         ).addTo(lossCirclesLayer);

//         // –¢–µ–∫—Å—Ç–æ–≤–∞—è –º–µ—Ç–∫–∞ —Ä—è–¥–æ–º —Å –∫–æ–Ω—Ü–æ–º –ª–∏–Ω–∏–∏
//         const lossLabel = L.divIcon({
//             className: 'loss-label',
//             html: ` 
//                 <div style="
//                     color: red;
//                     font-size: 12px;
//                     font-weight: bold;
//                     white-space: nowrap;
//                 ">
//                     ${loss}—Ç–Ω –ø–æ—Ç–µ—Ä–∏
//                 </div>
//             `,
//             iconSize: [50, 20], // –†–∞–∑–º–µ—Ä—ã –º–µ—Ç–∫–∏
//             iconAnchor: [-5, 5] // –¶–µ–Ω—Ç—Ä –º–µ—Ç–∫–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–æ—á–∫–∏
//         });

//         // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –º–µ—Ç–∫—É
//         L.marker([offsetLat, offsetLon], { icon: lossLabel }).addTo(lossCirclesLayer);
//     } else {
//         console.warn(`–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Ç–µ—Ä—è—Ö –¥–ª—è —Ç—Ä—É–±–æ–ø—Ä–æ–≤–æ–¥–∞ ${lineKey}`);
//     }
// });






// // –õ–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è/—Å–∫—Ä—ã—Ç–∏—è –ø–æ—Ç–µ—Ä—å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑—É–º–∞
// map.on('zoomend', () => {
//     const currentZoom = map.getZoom();

//     if (currentZoom >= minZoomToShowLossCircles) {
//         if (!map.hasLayer(lossCirclesLayer)) {
//             map.addLayer(lossCirclesLayer); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Ç–µ—Ä–∏
//         }
//     } else {
//         if (map.hasLayer(lossCirclesLayer)) {
//             map.removeLayer(lossCirclesLayer); // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ç–µ—Ä–∏
//         }
//     }
// });



// //--------------------------------------------------------




const filterButton = document.getElementById('checkboxOne');

map.removeLayer(flowLayerGroup);
map.removeLayer(minimalistFlowLayerGroup); 
// map.removeLayer(pointTanksLayer);
// map.removeLayer(technicalTanksLayer);

let layersVisible = false; 

filterButton.addEventListener('change', () => { 
    layersVisible = filterButton.checked; 

    if (layersVisible) {
        map.addLayer(flowLayerGroup); 
        map.addLayer(minimalistFlowLayerGroup); 
        // map.addLayer(pointTanksLayer); 
        // map.addLayer(technicalTanksLayer); 
    } else {
        map.removeLayer(flowLayerGroup); 
        map.removeLayer(minimalistFlowLayerGroup);
        // map.removeLayer(pointTanksLayer); 
        // map.removeLayer(technicalTanksLayer); 
    }
});

document.addEventListener("DOMContentLoaded", () => {
    initializeOilFlowMap();
});

