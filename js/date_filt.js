    document.addEventListener("DOMContentLoaded", async function () {
        console.log("üìÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞...");

        const monthInput = document.getElementById('month-input');
        if (!monthInput) {
            console.error("‚ùå –≠–ª–µ–º–µ–Ω—Ç #month-input –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return;
        }

        const now = new Date();
        const currentYear = now.getFullYear();
        const currentMonth = String(now.getMonth() + 1).padStart(2, '0');
        const monthStr = `${currentYear}-${currentMonth}`;

        monthInput.value = monthStr;

        const [year, month] = monthStr.split('-');
        await updateMapData(year, month);

        monthInput.addEventListener('change', async () => {
            const [selectedYear, selectedMonth] = monthInput.value.split('-');
            await updateMapData(selectedYear, selectedMonth);
        });
    });

    async function updateMapData(year, month) {
        showPreloader(); // ‚è≥ –í–∫–ª—é—á–∞–µ–º –ø—Ä–µ–ª–æ–∞–¥–µ—Ä

        try {
            console.log(`üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ ${year}-${month}`);

            // ‚¨á –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            const [points, oilTransferData, reservoirs] = await Promise.all([
                fetchPointsFromDB(),
                fetchOilTransferFromDB(year, month),
                fetchReservoirVolumesFromDB(year, month)
            ]);

            clearAllDataLayers();

            const zoomThreshold = 6;
            const currentZoom = map.getZoom();

            const checkboxOne = document.getElementById('checkboxOne');
            const checkboxTwo = document.getElementById('checkboxTwo');

            // ‚õî –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö
            if (oilTransferData.length === 0 && reservoirs.length === 0) {
                console.warn("‚ö† –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü. –ö–∞—Ä—Ç–∞ –æ—á–∏—â–µ–Ω–∞.");
                dataLoaded = false;

                const msg = document.getElementById('no-data-message');
                if (msg) msg.style.display = 'block';

                return;
            }

            // ‚úÖ –°–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö
            const msg = document.getElementById('no-data-message');
            if (msg) msg.style.display = 'none';

            // üß† –ö—ç—à–∏—Ä—É–µ–º
            window.cachedPoints = points;
            window.cachedOilTransferData = oilTransferData;
            window.cachedReservoirs = reservoirs;

            // üß≠ –õ–∏–Ω–∏–∏ –≤—Å–µ–≥–¥–∞ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞—é—Ç—Å—è
            await main(points, oilTransferData);

            // üõ¢Ô∏è –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –Ω–µ—Ñ—Ç–∏
            if (checkboxOne?.checked && oilTransferData.length > 0) {
                if (currentZoom >= zoomThreshold) {
                    addMinimalistFlow(points, oilTransferData);
                    await displayKenkiyakOilTotal(year, month, points);
                } else {
                    console.log("üõ¢Ô∏è –ù–µ—Ñ—Ç—å –Ω–µ –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω–∞ ‚Äî –∑—É–º –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞");
                }
            }

            // üõ¢Ô∏è –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤
            if (checkboxTwo?.checked && reservoirs.length > 0) {
                if (currentZoom >= zoomThreshold) {
                    addReservoirs(reservoirs);
                } else {
                    console.log("üõ¢Ô∏è –†–µ–∑–µ—Ä–≤—É–∞—Ä—ã –Ω–µ –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω—ã ‚Äî –∑—É–º –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞");
                    clearReservoirLayers(); // –æ—á–∏—â–∞–µ–º
                }
            } else {
                clearReservoirLayers(); // –æ—Ç–∫–ª—é—á–µ–Ω–æ –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
            }

            dataLoaded = true;
            console.log("‚úÖ –ö–∞—Ä—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞");
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã:", error);
        } finally {
            setTimeout(hidePreloader, 300); // ‚åõ –ü–ª–∞–≤–Ω–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
        }
    }





    function clearAllDataLayers() {
        if (window.flowLayerGroup) flowLayerGroup.clearLayers();
        if (window.minimalistFlowLayerGroup) minimalistFlowLayerGroup.clearLayers();
        if (window.reservoirLayerGroup) reservoirLayerGroup.clearLayers();
        if (window.pointTanksLayer) pointTanksLayer.clearLayers();
        if (window.technicalTanksLayer) technicalTanksLayer.clearLayers();
    }

    function clearReservoirLayers() {
        if (window.reservoirLayerGroup) reservoirLayerGroup.clearLayers();
        if (window.pointTanksLayer) pointTanksLayer.clearLayers();
        if (window.technicalTanksLayer) technicalTanksLayer.clearLayers();
        console.log("üßπ –†–µ–∑–µ—Ä–≤—É–∞—Ä—ã –æ—á–∏—â–µ–Ω—ã");
    }



    async function fetchReservoirVolumesFromDB(year, month) {
        try {
            const response = await fetch(`database/getReservoirData.php?year=${year}&month=${month}`);
            if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status}`);

            const reservoirData = await response.json();

            if (!Array.isArray(reservoirData)) {
                console.error("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ –Ω–µ –º–∞—Å—Å–∏–≤!", reservoirData);
                return [];
            }

            console.log(`üìä –û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞—Ö (${year}-${month}):`, reservoirData);
            return reservoirData;
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤:", error);
            return [];
        }
    }



    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–æ—Å—Ç—É–ø–Ω—É—é –¥–∞—Ç—É –∏–∑ –±–∞–∑—ã
    async function getLatestAvailableMonth() {
        try {
            const response = await fetch('database/getAvailableDates.php');
            if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—Ç");

            const dates = await response.json();
            if (dates.length === 0) return null;

            const latest = dates[0]; // –°–∞–º–∞—è –Ω–æ–≤–∞—è –¥–∞—Ç–∞
            return {
                year: latest.year,
                month: latest.month
            };
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–µ—Å—è—Ü–∞:", error);
            return null;
        }
    }
