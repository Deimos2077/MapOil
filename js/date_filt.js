document.addEventListener("DOMContentLoaded", async function () {
    console.log("üìÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...");

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await fetchAvailableDates();

    const filterButton = document.getElementById('filter-button');
    if (!filterButton) {
        console.error("‚ùå –û—à–∏–±–∫–∞: –∫–Ω–æ–ø–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ DOM!");
        return;
    }

    filterButton.addEventListener('click', async () => {
        const selectedYear = document.getElementById('year-select').value;
        const selectedMonth = document.getElementById('month-select').value;

        if (!selectedYear || !selectedMonth) {
            alert("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –∏ –º–µ—Å—è—Ü!");
            return;
        }

        console.log(`üìÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞ ${selectedYear}-${selectedMonth}`);
        await updateMapData(selectedYear, selectedMonth);
    });
});

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç (–≥–æ–¥–æ–≤ –∏ –º–µ—Å—è—Ü–µ–≤)
async function fetchAvailableDates() {
    try {
        const response = await fetch('database/getAvailableDates.php'); // PHP-—Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–¥–æ–≤ –∏ –º–µ—Å—è—Ü–µ–≤
        if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status}`);

        const dates = await response.json();
        
        const yearSelect = document.getElementById('year-select');
        const monthSelect = document.getElementById('month-select');

        if (!yearSelect || !monthSelect) {
            console.error("‚ùå –û—à–∏–±–∫–∞: —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –≥–æ–¥–∞ –∏ –º–µ—Å—è—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!");
            return;
        }

        // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        yearSelect.innerHTML = "";
        monthSelect.innerHTML = "";

        // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≥–æ–¥—ã
        [...new Set(dates.map(date => date.year))].forEach(year => {
            const option = document.createElement('option');
            option.value = year;
            option.textContent = year;
            yearSelect.appendChild(option);
        });

        // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–µ—Å—è—Ü—ã
        [...new Set(dates.map(date => date.month))].forEach(month => {
            const option = document.createElement('option');
            option.value = month;
            option.textContent = month;
            monthSelect.appendChild(option);
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –¥–∞—Ç–µ
async function updateMapData(year, month) {
    console.log(`üìä –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –Ω–∞ ${year}-${month}`);

    const points = await fetchPointsFromDB();
    const oilTransferData = await fetchOilTransferFromDB(year, month);
    const reservoirs = await fetchReservoirVolumesFromDB(year, month);

    if (points.length === 0 || oilTransferData.length === 0) {
        console.warn("‚ö† –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.");
        return;
    }

    // –û—á–∏—â–∞–µ–º –∫–∞—Ä—Ç—É –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    flowLayerGroup.clearLayers();

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    addMinimalistFlow(points, oilTransferData);
    addReservoirs(reservoirs);

    console.log("‚úÖ –ö–∞—Ä—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞");
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–µ—Ñ—Ç–∏ —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –≥–æ–¥—É –∏ –º–µ—Å—è—Ü—É
async function fetchOilTransferFromDB(year, month) {
    try {
        const response = await fetch(`database/getData.php?table=oiltransfer&year=${year}&month=${month}`);
        if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status}`);

        const oilTransferData = await response.json();

        if (!Array.isArray(oilTransferData)) {
            console.error("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –Ω–µ—Ñ—Ç–∏ –Ω–µ –º–∞—Å—Å–∏–≤!", oilTransferData);
            return [];
        }

        console.log(`üìä –î–∞–Ω–Ω—ã–µ –æ –Ω–µ—Ñ—Ç–∏ (${year}-${month}):`, oilTransferData);
        
        return oilTransferData.map(record => ({
            id: record.id,
            from_point: record.from_point_id,
            to_point: record.to_point_id,
            from_amount: record.from_amount,
            to_amount: record.to_amount,
            losses: record.losses || 0
        }));
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–µ—Ñ—Ç–∏:", error);
        return [];
    }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
async function fetchReservoirVolumesFromDB(year, month) {
    try {
        const response = await fetch(`database/getData.php?table=reservoirvolumes&year=${year}&month=${month}`);
        if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status}`);

        const reservoirVolumes = await response.json();

        if (!Array.isArray(reservoirVolumes)) {
            console.error("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ –Ω–µ –º–∞—Å—Å–∏–≤!", reservoirVolumes);
            return [];
        }

        console.log(`üìä –î–∞–Ω–Ω—ã–µ –æ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞—Ö (${year}-${month}):`, reservoirVolumes);
        return reservoirVolumes;
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤:", error);
        return [];
    }
}
